-- USE SECOND CODING EXAM DATABASE
USE SecondCodingExam

DECLARE @ApplicationDatabaseName nvarchar(128)
SET @ApplicationDatabaseName = N'SecondCodingExam'

-- CREATE USERS TABLE
IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = @ApplicationDatabaseName AND TABLE_NAME = 'Users'))
BEGIN
	CREATE TABLE Users (
		Id INT PRIMARY KEY IDENTITY,
		Firstname NVARCHAR(255) NOT NULL,
		Lastname NVARCHAR(255) NOT NULL,
		Email NVARCHAR(255) NOT NULL,
		Password NVARCHAR(255) NOT NULL,
	)
END

-- CREATE BENEFITS TABLE
IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = @ApplicationDatabaseName AND TABLE_NAME = 'Benefits'))
BEGIN
	CREATE TABLE Benefits (
		Id INT PRIMARY KEY IDENTITY,
		UserId INT FOREIGN KEY REFERENCES Users(Id) NOT NULL,
		GuaranteedIssue INT NOT NULL,
		MaxAgeLimit INT NOT NULL,
		MinAgeLimit INT NOT NULL,
		MaxRange INT NOT NULL,
		MinRange INT NOT NULL,
		Increments INT NOT NULL,
		IsDeleted BIT DEFAULT 0 NOT NULL,
		IsUpdated BIT DEFAULT 0 NOT NULL,
		CreatedDate DATETIME NOT NULL,
		CreatedBy NVARCHAR(255) NOT NULL,
		ModifiedDate DATETIME,
		ModifiedBy NVARCHAR(255)
	)
END

-- CREATE BENEFITS HISTORIES TABLE
IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = @ApplicationDatabaseName AND TABLE_NAME = 'BenefitsHistories'))
BEGIN
	CREATE TABLE BenefitsHistories (
		Id INT PRIMARY KEY IDENTITY,
		UserId INT FOREIGN KEY REFERENCES Users(Id) NOT NULL,
		BenefitId INT FOREIGN KEY REFERENCES Benefits(Id) NOT NULL,
		GuaranteedIssue INT NOT NULL,
		MaxAgeLimit INT NOT NULL,
		MinAgeLimit INT NOT NULL,
		MaxRange INT NOT NULL,
		MinRange INT NOT NULL,
		Increments INT NOT NULL,
		IsDeleted BIT DEFAULT 0 NOT NULL,
		BenefitCreatedDate DATETIME NOT NULL,
		BenefitCreatedBy NVARCHAR(255) NOT NULL,
		ModifiedDate DATETIME NOT NULL,
		ModifiedBy NVARCHAR(255) NOT NULL
	)
END

-- CREATE CUSTOMERS TABLE
IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = @ApplicationDatabaseName AND TABLE_NAME = 'Customers'))
BEGIN
	CREATE TABLE Customers (
		Id INT PRIMARY KEY IDENTITY,
		UserId INT FOREIGN KEY REFERENCES Users(Id) NOT NULL,
		Firstname NVARCHAR(255) NOT NULL,
		Lastname NVARCHAR(255) NOT NULL,
		BasicSalary INT NOT NULL,
		Birthdate DATETIME NOT NULL,
		IsDeleted BIT DEFAULT 0 NOT NULL,
		IsUpdated BIT DEFAULT 0 NOT NULL,
		CreatedDate DATETIME NOT NULL,
		CreatedBy NVARCHAR(255) NOT NULL,
		ModifiedDate DATETIME,
		ModifiedBy NVARCHAR(255)
	)
END

-- CREATE CUSTOMERS CURRENT BENEFITS TABLE
IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = @ApplicationDatabaseName AND TABLE_NAME = 'CustomersCurrentBenefits'))
BEGIN
	CREATE TABLE CustomersCurrentBenefits (
		Id INT PRIMARY KEY IDENTITY,
		UserId INT FOREIGN KEY REFERENCES Users(Id) NOT NULL,
		BenefitId INT FOREIGN KEY REFERENCES Benefits(Id) NOT NULL,
		CustomerId INT FOREIGN KEY REFERENCES Customers(Id) NOT NULL,
		GuaranteedIssue INT NOT NULL,
		MaxAgeLimit INT NOT NULL,
		MinAgeLimit INT NOT NULL,
		MaxRange INT NOT NULL,
		MinRange INT NOT NULL,
		Increments INT NOT NULL,
		IsDeleted BIT DEFAULT 0 NOT NULL,
		IsUpdated BIT DEFAULT 0 NOT NULL,
		CreatedDate DATETIME NOT NULL,
		CreatedBy NVARCHAR(255) NOT NULL,
		ModifiedDate DATETIME,
		ModifiedBy NVARCHAR(255)
	)
END

-- CREATE CUSTOMERS BENEFITS HISTORIES TABLE
IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = @ApplicationDatabaseName AND TABLE_NAME = 'CustomersBenefitsHistories'))
BEGIN
	CREATE TABLE CustomersBenefitsHistories (
		Id INT PRIMARY KEY IDENTITY,
		UserId INT FOREIGN KEY REFERENCES Users(Id) NOT NULL,
		CustomersCurrentBenefitsId INT FOREIGN KEY REFERENCES CustomersCurrentBenefits(Id) NOT NULL,
		CustomerId INT FOREIGN KEY REFERENCES Customers(Id) NOT NULL,
		GuaranteedIssue INT NOT NULL,
		MaxAgeLimit INT NOT NULL,
		MinAgeLimit INT NOT NULL,
		MaxRange INT NOT NULL,
		MinRange INT NOT NULL,
		Increments INT NOT NULL,
		IsDeleted BIT DEFAULT 0 NOT NULL,
		BenefitCreatedDate DATETIME NOT NULL,
		BenefitCreatedBy NVARCHAR(255) NOT NULL,
		ModifiedDate DATETIME NOT NULL,
		ModifiedBy NVARCHAR(255) NOT NULL
	)
END

-- CREATE CUSTOMERS HISTORIES HISTORY TABLE
IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = @ApplicationDatabaseName AND TABLE_NAME = 'CustomersHistories'))
BEGIN
	CREATE TABLE CustomersHistories (
		Id INT PRIMARY KEY IDENTITY,
		CustomerId INT FOREIGN KEY REFERENCES Customers(Id) NOT NULL,
		CustomersBenefitsHistoryId INT FOREIGN KEY REFERENCES CustomersBenefitsHistories(Id) NOT NULL,
		Firstname NVARCHAR(255) NOT NULL,
		Lastname NVARCHAR(255) NOT NULL,
		BasicSalary INT NOT NULL,
		Birthdate DATETIME NOT NULL,
		IsDeleted BIT DEFAULT 0 NOT NULL,
		CreatedDate DATETIME NOT NULL,
		CreatedBy NVARCHAR(255) NOT NULL,
		ModifiedDate DATETIME NOT NULL,
		ModifiedBy NVARCHAR(255) NOT NULL
	)
END

-- CREATE CALCULATIONS TABLE
IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = @ApplicationDatabaseName AND TABLE_NAME = 'Calculations'))
BEGIN
	CREATE TABLE Calculations (
		Id INT PRIMARY KEY IDENTITY,
		CustomersCurrentBenefitsId INT FOREIGN KEY REFERENCES CustomersCurrentBenefits(Id) NOT NULL,
		CustomerId INT FOREIGN KEY REFERENCES Customers(Id) NOT NULL,
		Multiple INT NOT NULL,
		BenefitsAmountQuotation INT NOT NULL,
		PendedAmount INT NOT NULL,
		CurrentBenefit INT NOT NULL,
		CreatedDate DATETIME NOT NULL,
		ModifiedDate DATETIME,
		IsBenefitPending BIT DEFAULT 0 NOT NULL,
		IsRecalculated BIT DEFAULT 0 NOT NULL
	)
END

-- CREATE CALCULATIONS HISTORIES TABLE
IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = @ApplicationDatabaseName AND TABLE_NAME = 'CalculationsHistories'))
BEGIN
	CREATE TABLE CalculationsHistories (
		Id INT PRIMARY KEY IDENTITY,
		CustomersCurrentBenefitsId INT FOREIGN KEY REFERENCES CustomersCurrentBenefits(Id) NOT NULL,
		CustomerId INT FOREIGN KEY REFERENCES Customers(Id) NOT NULL,
		Multiple INT NOT NULL,
		BenefitsAmountQuotation INT NOT NULL,
		PendedAmount INT NOT NULL,
		CurrentBenefit INT NOT NULL,
		IsBenefitPending BIT DEFAULT 0 NOT NULL,
		CreatedDate DATETIME NOT NULL,
		ModifiedDate DATETIME NOT NULL
	)
END